@function getValue($n) {
  @return $n / ($n * 0 + 1);
}

@mixin font-size($fontSize, $toUnit: rem, $fromUnitSpecific: px) {
   $currentUnit: unit($fontSize);
   $currentValue: getValue($fontSize);

   @if $currentUnit == "" {
      $currentUnit: $fromUnitSpecific;
   }

   @if $currentUnit == "px" {
      @if $toUnit == "rem" {
         font-size: unquote(($currentValue) + px);
         font-size: unquote(($currentValue / 10) + $toUnit);
      }
      @else if $toUnit == "em" {
         font-size: unquote(($currentValue / 10) + $toUnit);
      }
   }
   @else if $currentUnit == "rem" or $currentUnit == "em" {
      @if $toUnit == "px" {
         font-size: unquote(($currentValue * 10) + px);
      }
      @else {
         font-size: unquote(($currentValue) + $toUnit);
      }
   }
}

@mixin font-face($font-family, $font-file-name: false, $weight: normal, $style: normal, $otf: false) {
   @font-face {
      $font: $font-family;
      $ottf: ttf;
      $ottf-format: truetype;

      @if $font-file-name {
         $font: $font-file-name;
      }

      @if $otf {
         $ottf: otf;
         $ottf-format: OpenType;
      }

      font: {
         family: $font-family;
         weight: $weight;
         style: $style;
      }

      /*src: font-url('#{$font}.eot');*/
      src: /*font-url('#{$font}.eot?#iefix')               format('embedded-opentype'),*/
           font-url('#{$font}.woff')                     format('woff'),
           font-url('#{$font}.#{$ottf}')                 format('#{$ottf-format}'),
           font-url('#{$font}.svg##{$font-family}')      format('svg');
  }
}

%vertical-align {
   position: relative;
   top: 50%;
   -webkit-transform: translateY(-50%);
   -ms-transform: translateY(-50%);
   transform: translateY(-50%);
}

@mixin breakpoint() {
    @media (max-width: 480px)  { @content; }
}

@mixin center($width, $image) {
   left: ($width / 2) - image-width($image) / 2;
}
